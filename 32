public class Solution {
    public int longestValidParentheses(String s) {
        
    	Stack<Integer> stack = new Stack<Integer>();
    	int max = 0;
    	char[] arr = s.toCharArray();
     	for(int i = 0; i < s.length(); i++) {
    		if(arr[i] == ')' && !stack.isEmpty() && arr[stack.peek()] == '(') {
    			stack.pop();
    			if(stack.isEmpty()) {
    				max = i + 1;
    			}else {
        			max = Math.max(max, i-stack.peek());
    			}
    		}else {
    			stack.push(i);
    		}
    	}
    	return max;
        
    }
    public int longestValidParentheses2(String s) {
        if(s == null || s.length() == 0) {
        	return 0;
        }
        
        int[] dp = new int[s.length()];
        int max = 0;
        dp[s.length()-1] = 0;
        for(int i = s.length()-2; i >= 0; i--) {
        	if(s.charAt(i) == ')') {
        		dp[i] = 0;
        	}else {
        		int j = i + 1 +dp[i+1];
        		if(j < s.length() && s.charAt(j) == ')') {
        			dp[i] = dp[i+1] + 2 + (j+1<s.length()?dp[j+1]:0);
        		}else {
        			dp[i] = 0;
        		}		
        	}
        	max = Math.max(dp[i], max);
        }
        return max;
    }
}
