public class Solution {
    public int largestRectangleArea(int[] height) {
        
if(height == null || height.length == 0) {
    		return 0;
    	}
    	//stack stores increasing index of height
    	Stack<Integer> stack = new Stack<Integer>();
    	
    	if(height.length == 1) {
    		return height[0];
    	}
    	
    	int max = 0;
    	int i = 0;
    	while(i < height.length) {
    		//push if next height < that of peek
    		if(stack.isEmpty() || height[i] >= height[stack.peek()]) {
    			stack.push(i);		
    			i++;
    		}else {
        			int t = stack.pop();
        			int h = height[t];    			
        			//if stack is empty, length = i; else length = i-t-1
        			max = Math.max(max, h*(stack.empty()?i:i-stack.peek()-1));
    		}
    	}
    	//increasing index sequence
    	while(stack.isEmpty() == false) {
    		int t = stack.pop();
			int h = height[t];    			
			//if stack is empty, length = i; else length = i-t-1
			max = Math.max(max, h*(stack.empty()?i:i-stack.peek()-1));
    	}
    	return max;
    }
}
