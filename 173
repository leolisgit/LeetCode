/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {

	public static Stack<TreeNode> s = new Stack();
	public TreeNode r;
    public BSTIterator(TreeNode root) {
    	r = root;
    	
    	while(r != null) {
    		s.push(r);
    		r = r.left;
    	}
    	
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
    	
    	if(s.isEmpty() == false) {
    		return true;
    	}
    	else {
    		return false;
    	}
        
    }

    /** @return the next smallest number */
    public int next() {
    	TreeNode n = null;
    	int val = 0;
    	
    	if(s.isEmpty() == false ) {
    		n = s.pop();
    		val = n.val;
    		if (n.right != null) {
    			n = n.right;
    			while(n != null) {
            		s.push(n);
            		n = n.left;
    			}
    		}
    		return val;

    	} 
    	return 0;
        
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
