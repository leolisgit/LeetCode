public class Solution {
    public int maximalRectangle(char[][] matrix) {
    	
    	if(matrix == null || matrix.length == 0) {
    		return 0;
    	}
    	
    	int row = matrix.length;
    	int col = matrix[0].length;
    	
    	int[][] height = new int[row][col];
    	int maxArea = 0;
    	for(int i = 0; i < row; i++) {
    		for(int j = 0; j < col; j++) {
    			if(matrix[i][j] == '0') {
    				height[i][j] = 0;		
    			}else {
    				height[i][j] = i == 0 ? 1 : height[i-1][j] + 1;
    			}
    		}
    	}
    	
    	for(int i = 0; i < row; i++) {
    		int max = maxAreaInHis(height[i]);
    		if(max > maxArea) {
    			maxArea = max;
    		}
    	}
    	
    	return maxArea;
    }
    public int maxAreaInHis(int[] height) {
        
    	Stack<Integer> stack = new Stack<Integer>();
    	
    	int max = 0;
    	int i = 0;
    	while(i < height.length) {
    		//push if next height < that of peek
    		if(stack.isEmpty() || height[i] >= height[stack.peek()]) {
    			stack.push(i++);		
    		}else {
        			int t = stack.pop();
        			//if stack is empty, length = i; else length = i-t-1
        			max = Math.max(max, height[t]*(stack.empty()?i:i-stack.peek()-1));
    		}
    	}
    	//increasing index sequence
    	while(stack.isEmpty() == false) {
    		int t = stack.pop();
			int h = height[t];    			
			//if stack is empty, length = i; else length = i-t-1
			max = Math.max(max, h*(stack.empty()?i:i-stack.peek()-1));
    	}
    	return max;
    	
    }
}
